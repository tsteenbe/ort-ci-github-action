---
# Copyright (C) 2022 The ORT Project Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

name: 'Setup workspace'
description: 'Creates required environment variables and directories.'
author: 'The ORT Project Authors'

inputs:
  http-file-server-url:
    default: ''
    description: |
      URL of the HTTP file server used for caching scan-results and storing file archives.
    required: false
  http-file-server-username:
    default: ''
    description: |
      Username for HTTP file server used for caching scan-results and storing file archives.
    required: false
  http-file-server-password:
    default: ''
    description: |
      Password for HTTP file server used for caching scan-results and storing file archives.
    required: false
  http-file-server-token:
    default: ''
    description: |
      API token for HTTP file server used for caching scan-results and storing file archives.
    required: false
  jdk-java-options:
    default: '-Xmx5120m'
    description: |
      Options to pass to the Java JDK.
    required: false
  log-level:
    default: 'warn'
    description: |
      Set value to 'debug' to see additional debug output to help tracking down errors.
    required: false
  ort-cli-args:
    default: '-P ort.forceOverwrite=true --stacktrace'
    description: |
      List of arguments to pass to ORT CLI, applies to all commands.
    required: false
  ort-cli-analyze-args:
    default: ''
    description: |
      List of arguments to pass to ORT Analyzer CLI.
    required: false
  ort-cli-scan-args:
    default: ''
    description: |
      List of arguments to pass to ORT Scanner CLI.
    required: false
  ort-cli-evaluate-args:
    default: ''
    description: |
      List of arguments to pass to ORT Evaluator CLI.
    required: false
  ort-cli-advise-args:
    default: ''
    description: |
      List of arguments to pass to ORT Advisor CLI.
    required: false
  ort-cli-report-args:
    default: '-O SpdxDocument=output.file.formats=json,yaml'
    description: |
      List of arguments to pass to ORT Reporter CLI.
    required: false
  ort-config-path:
    default: ''
    description: |
      Path to ORT configuration directory within the user home directory.
    required: false
  ort-home-path:
    default: '.ort'
    description: |
      Path to ORT 'home' or 'data' directory usually found within the user home directory.
    required: false
  ort-yml-path:
    default: ''
    description: |
      Path to file containing the repository configuration.
      If set, the '.ort.yml' file from the repository is ignored.
    required: false
  project-path:
    default: '${{ github.workspace }}'
    description: |
      Path within $GITHUB_WORKSPACE to be analyzed/scanned with ORT.
      If empty, $GITHUB_WORKSPACE directory is scanned.
    required: false
  sw-name:
    default: 'unknown'
    description: |
      Name of project, product or component to be scanned.
      By default the name of the repository is used as shown in its clone URL.
    required: false
  sw-version:
    default: 'unknown'
    description: |
      Project version number or release name (use the version from package metadata, not VCS revision).
      By default, the Git short SHA is used.
    required: false

runs:
  using: 'composite'
  steps:
    - name: Setup Workspace
      id: ort-setup-workspace
      shell: bash
      env:
        HTTP_FILE_SERVER_PASSWORD: ${{ inputs.http-file-server-password }}
        HTTP_FILE_SERVER_TOKEN: ${{ inputs.http-file-server-token }}
        HTTP_FILE_SERVER_URL: ${{ inputs.http-file-server-url }}
        HTTP_FILE_SERVER_USERNAME: ${{ inputs.http-file-server-username }}
        JDK_JAVA_OPTIONS: ${{ inputs.jdk-java-options }}
        ORT_CLI: 'sh ${{ env.ORT_CLI }}'
        ORT_CLI_ARGS: ${{ inputs.ort-cli-args }}
        ORT_CLI_ANALYZE_ARGS: ${{ inputs.ort-cli-analyze-args }}
        ORT_CLI_SCAN_ARGS: ${{ inputs.ort-cli-scan-args }}
        ORT_CLI_EVALUATE_ARGS: ${{ inputs.ort-cli-evaluate-args }}
        ORT_CLI_ADVISE_ARGS: ${{ inputs.ort-cli-advise-args }}
        ORT_CLI_REPORT_ARGS: ${{ inputs.ort-cli-report-args }}
        ORT_HOME_PATH: ${{ inputs.ort-home-path }}
        ORT_LOG_LEVEL: ${{ inputs.log-level }}
        ORT_YML_PATH: ${{ inputs.ort-yml-path }}
        POSTGRES_PASSWORD: ${{ inputs.db-password }}
        POSTGRES_URL: ${{ inputs.db-url }}
        POSTGRES_USERNAME: ${{ inputs.db-username }}
        PROJECT_PATH: ${{ inputs.project-path }}
        SW_NAME: ${{ inputs.sw-name }}
        SW_VERSION: ${{ inputs.sw-version }}
      run: |
        echo -e "\e[1;33m Initializing ORT in GitHub workspace... "
        mkdir -p $HOME/.cache/scancode-tk/; chmod -R aug+w ${HOME}/.cache/ || :
        mkdir -p $HOME/.config/jgit/; chmod -R aug+w ${HOME}/.config/ || :
        mkdir -p $HOME/$ORT_HOME_PATH/{cache,config,ort-results,scanner/archive/,scanner/provenance/}; chmod -R aug+w ${HOME}/$ORT_HOME_PATH/ || :
        mkdir -p $HOME/.gradle/; chmod -R aug+w ${HOME}/.gradle/ || :
        mkdir -p $HOME/.rustup/{cache,download,tmp}; chmod -R aug+w ${HOME}/.rustup/ || :
        mkdir -p $HOME/go/; chmod -R aug+w ${HOME}/go/ || :
        export ORT_CONFIG_PATH=${ORT_CONFIG_PATH:-"$HOME/$ORT_HOME_PATH/config"}
        export ORT_DATA_DIR=${HOME}/${ORT_HOME_PATH}
        export ORT_RESULTS_PATH="$HOME/$ORT_HOME_PATH/ort-results"
        export ORT_RESULTS_ADVISOR_PATH="${ORT_RESULTS_PATH}/advisor-result.json"
        export ORT_RESULTS_ANALYZER_PATH="${ORT_RESULTS_PATH}/analyzer-result.json"
        export ORT_RESULTS_CURRENT_PATH="${ORT_RESULTS_PATH}/current-result.json"
        export ORT_RESULTS_EVALUATED_MODEL_PATH="${ORT_RESULTS_PATH}/evaluated-model.json"
        export ORT_RESULTS_EVALUATOR_PATH="${ORT_RESULTS_PATH}/evaluation-result.json"
        export ORT_RESULTS_HTML_REPORT_PATH="${ORT_RESULTS_PATH}/ort-results/scan-report.html"
        export ORT_RESULTS_SCANNER_PATH="${ORT_RESULTS_PATH}/scan-result.json"
        export ORT_RESULTS_SBOM_CYCLONE_XML_PATH="${ORT_RESULTS_PATH}/bom.cyclonedx.xml"
        export ORT_RESULTS_SBOM_SPDX_JSON_PATH="${ORT_RESULTS_PATH}/bom.spdx.json"
        export ORT_RESULTS_SBOM_SPDX_YML_PATH="${ORT_RESULTS_PATH}/bom.spdx.yml"
        export ORT_RESULTS_WEB_APP_PATH="${ORT_RESULTS_PATH}/scan-report-web-app.html"
        [[ -d "$PROJECT_PATH/.git" && "$SW_NAME" = "unknown" ]] && SW_NAME=$(cd $PROJECT_PATH; basename -s .git `git config --get remote.origin.url`)
        [[ -d "$PROJECT_PATH/.git" && "$SW_VERSION" = "unknown" ]] && SW_VERSION=$(cd $PROJECT_PATH; git rev-parse --short HEAD)
        # Remove all special characters and whitespace from software name as some tools cannot handle them.
        SW_NAME_SAFE=$(echo $SW_NAME | sed -e 's/[^A-Za-z0-9 \-\_]//g' -e 's/\s/-/g' -e 's/\([A-Z]\)/\L\1/g')
        ORT_RESULTS_ARTIFACT_NAME="ort-results-${SW_NAME_SAFE}"
        ORT_RESULTS_ARTIFACT_NAME="${ORT_RESULTS_ARTIFACT_NAME}-${SW_VERSION}"
        export ORT_RESULTS_ARTIFACT_NAME SW_NAME SW_REVISION SW_NAME_SAFE
        printenv >> "$GITHUB_ENV"
