---
# Copyright (C) 2022 The ORT Project Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE


name: 'GitHub Action for ORT - Minimal'
description: 'A GitHub Action workflow to run ORT.'
author: 'The ORT Project Authors'

inputs:
  vcs-type:
    default: 'git'
    description: |
      Type of version control system.
      Accepted values are 'git', 'git-repo', 'mercurial' or 'subversion'.
    required: false
  vcs-url:
    default: ''
    description: |
      Repository or clone URL of project to scan.
    required: false
  vcs-revision:
    default: ''
    description: |
      SHA1 or tag to scan (do not use branch names as they can move). 
      If vcs-type is 'git-repo', SHA1 must be unabbreviated.
      Tag names must be prefixed with 'refs/tags/'.
    required: false
  vcs-path:
    default: ''
    description: |
      Leave this field empty unless one of the following special cases applies:
      1) project vcs-type is git-repo - specify path to repo manifest file
      (e.g. sdk.xml, note vcs-url must point to a manifest repository)
      2) you require sparse checkout - specify repository sub-path to download and scan
      (e.g. projects/gradle/, note sparse checkout is possible only for vcs-type git, mercurial or subversion)
  advisors:
    default: 'OSV'
    description: |
      Comma-separated list of security vulnerability advisors to use.
    required: false
  allow-dynamic-versions:
    default: 'false'
    description: |
      Set to 'true' only if dynamic dependency versions are allowed (note version ranges specified for dependencies may cause unstable results).
      This field applies only to package managers that support lock files, e.g. NPM.
    required: false
  db-url:
    default: ''
    description: |
      URL of the PostgreSQL database used for caching scan-results and storing file archives.
    required: false
  db-username:
    default: ''
    description: |
      Username for the PostgreSQL database used for caching scan-results and storing file archives.
    required: false
  db-password:
    default: ''
    description: |
      Password for the PostgreSQL database used for caching scan-results and storing file archives.
    required: false
  docker-cli-args:
    default: ''
    description: |
      List of arguments to pass to Docker CLI.
    required: false
  fail-on:
    default: ''
    description: |
      Comma-separated list of ORT results that if exceeding their severity threshold will fail the action.
      Accepted values are '', 'issues', 'violations' or 'issues,violations'.
      If empty, then exceeding severity threshold will not fail the action.
    required: false
  http-file-server-url:
    default: ''
    description: |
      URL of the HTTP file server used for caching scan-results and storing file archives.
    required: false
  http-file-server-username:
    default: ''
    description: |
      Username for HTTP file server used for caching scan-results and storing file archives.
    required: false
  http-file-server-password:
    default: ''
    description: |
      Password for HTTP file server used for caching scan-results and storing file archives.
    required: false
  http-file-server-token:
    default: ''
    description: |
      API token for HTTP file server used for caching scan-results and storing file archives.
    required: false
  image:
    default: 'ghcr.io/tsteenbe/ort-container-pr-6225:ort-sha-d6463be'
    description: |
      URL for ORT Docker image to use.
    required: false
  jdk-java-options:
    default: '-Xmx5120m'
    description: |
      Options to pass to the Java JDK.
    required: false
  log-level:
    default: 'warn'
    description: |
      Set value to 'debug' to see additional debug output to help tracking down errors.
    required: false
  ort-cli-args:
    default: '-P ort.forceOverwrite=true --stacktrace'
    description: |
      List of arguments to pass to ORT CLI, applies to all commands.
    required: false
  ort-cli-analyze-args:
    default: ''
    description: |
      List of arguments to pass to ORT Analyzer CLI.
    required: false
  ort-cli-scan-args:
    default: ''
    description: |
      List of arguments to pass to ORT Scanner CLI.
    required: false
  ort-cli-evaluate-args:
    default: ''
    description: |
      List of arguments to pass to ORT Evaluator CLI.
    required: false
  ort-cli-advise-args:
    default: ''
    description: |
      List of arguments to pass to ORT Advisor CLI.
    required: false
  ort-cli-report-args:
    default: '-O SpdxDocument=output.file.formats=json,yaml'
    description: |
      List of arguments to pass to ORT Reporter CLI.
    required: false
  ort-config-path:
    default: ''
    description: |
      Path to ORT configuration directory within the user home directory.
    required: false
  ort-home-path:
    default: '.ort'
    description: |
      Path to ORT 'home' or 'data' directory within the user home directory.
    required: false
  ort-config-repository:
    default: 'https://github.com/oss-review-toolkit/ort-config.git'
    description: |
      URL to ORT configuration repository to use.
    required: false
  ort-config-revision:
    default: 'main'
    description: |
      The Git revision or branch of the ORT configuration repository to use.
    required: false
  ort-yml-path:
    default: ''
    description: |
      Path to file containing the repository configuration.
      If set, the '.ort.yml' file from the repository is ignored.
    required: false
  project-path:
    default: '${{ github.workspace }}'
    description: |
      Path within $GITHUB_WORKSPACE to be analyzed/scanned with ORT.
      If empty, $GITHUB_WORKSPACE directory is scanned.
    required: false
  report-formats:
    default: 'CycloneDx,PlainTextTemplate,SpdxDocument,WebApp'
    description: |
      Comma-separated list of ORT reporters to run.
    required: false
  run:
    default: >
      setup-go,
      setup-java,
      setup-node,
      setup-python,
      cache-dependencies,
      labels,
      analyzer,
      evaluator,
      advisor,
      reporter,
      upload-results
    description: |
      Comma-separated list of optional workflow steps to run.
    required: false
  sw-name:
    default: 'unknown'
    description: |
      Name of project, product or component to be scanned.
      By default the name of the repository is used as shown in its clone URL.
    required: false
  sw-version:
    default: 'unknown'
    description: |
      Project version number or release name (use the version from package metadata, not VCS revision).
      By default, the Git short SHA is used.
    required: false

runs:
  using: 'composite'
  steps:
      - name: Use HTTPS instead of SSH for Git cloning
        shell: bash
        run: |
          git config --global url.https://github.com/.insteadOf ssh://git@github.com/
      # - name: Checkout GitHub action for ORT
      #   uses: actions/checkout@v3
      #   with:
      #     path: ./.github/actions/tmp
      # - name: Move helper actions
      #   shell: bash
      #   run: |
      #     mv ./.github/actions/tmp/actions/* ./.github/actions/.
      #     rm -rf ./.github/actions/tmp
      - uses: tsteenbe/ort-ci-github-action/setup-package-managers@v1.1
        with:
          run: ${{ inputs.run }}
      - uses: tsteenbe/ort-ci-github-action/setup-ort-dist-archive@v1.1
      - uses: tsteenbe/ort-ci-github-action/print-ort-version@v1.1
        with:
          ort-cli: 'sh ${{ env.ORT_CLI }}'
      - uses: tsteenbe/ort-ci-github-action/setup-workspace@v1.1
        with:
          http-file-server-password: ${{ inputs.http-file-server-password }}
          http-file-server-token: ${{ inputs.http-file-server-token }}
          http-file-server-url: ${{ inputs.http-file-server-url }}
          http-file-server-username: ${{ inputs.http-file-server-username }}
          jdk-java-options: ${{ inputs.jdk-java-options }}
          ort-cli-args: ${{ inputs.ort-cli-args }}
          ort-cli-analyze-args: ${{ inputs.ort-cli-analyze-args }}
          ort-cli-scan-args: ${{ inputs.ort-cli-scan-args }}
          ort-cli-evaluate-args: ${{ inputs.ort-cli-evaluate-args }}
          ort-cli-advise-args: ${{ inputs.ort-cli-advise-args }}
          ort-cli-report-args : ${{ inputs.ort-cli-report-args }}
          ort-home-path: ${{ inputs.ort-home-path }}
          log-level: ${{ inputs.log-level }}
          ort-yml-path: ${{ inputs.ort-yml-path }}
          db-password: ${{ inputs.db-password }}
          db-url: ${{ inputs.db-url }}
          db-username : ${{ inputs.db-username }}
          project-path: ${{ inputs.project-path }}
          sw-name: ${{ inputs.sw-name }}
          sw-version: ${{ inputs.sw-version }}
      - uses: tsteenbe/ort-ci-github-action/setup-ort-config@v1.1
        with:
          ort-config-path: ${{ env.ORT_CONFIG_PATH }}
          ort-config-repository: ${{ inputs.ort-config-repository }}
          ort-config-revision: ${{ inputs.ort-config-revision }}
      - uses: tsteenbe/ort-ci-github-action/cache-dependencies@v1.1
        if: contains(inputs.run, 'cache-dependencies') && startsWith(runner.os, 'Linux')
      - uses: tsteenbe/ort-ci-github-action/cache-ort-scan-results@v1.1
        if: contains(inputs.run, 'cache-scan-results') && startsWith(runner.os, 'Linux')
      - uses: tsteenbe/ort-ci-github-action/setup-scancode@v1.1
        if: contains(inputs.run, 'scanner')
      - name: Run ORT Analyzer
        id: ort-analyzer
        shell: bash
        if: contains(inputs.run, 'analyzer')
        env:
          ORT_ALLOW_DYNAMIC_VERSIONS: ${{ inputs.allow-dynamic-versions }}
        run: |
          echo -e "\e[1;33m Running ORT Analyzer... "
          $ORT_CLI \
          --$ORT_LOG_LEVEL \
          -P ort.analyzer.allowDynamicVersions=${ORT_ALLOW_DYNAMIC_VERSIONS} \
          $ORT_CLI_ARGS \
          analyze \
          -i $PROJECT_PATH \
          -o $ORT_RESULTS_PATH \
          -f JSON \
          $ORT_CLI_ANALYZE_ARGS || ORT_CLI_ANALYZE_EXIT_CODE=$? \
          && export ORT_CLI_ANALYZE_EXIT_CODE="${ORT_CLI_ANALYZE_EXIT_CODE:-0}" \
          && printenv >> "$GITHUB_ENV"
          [[ -f $ORT_RESULTS_ANALYZER_PATH ]] && \
            ln -frs $ORT_RESULTS_ANALYZER_PATH $ORT_RESULTS_CURRENT_PATH || \
            echo -e "\e[1;31m File $ORT_RESULTS_ANALYZER_PATH not found."
          [[ $ORT_CLI_ANALYZE_EXIT_CODE -ne 2 ]] && exit $ORT_CLI_ANALYZE_EXIT_CODE || exit 0
      - name: Run ORT Scanner
        id: ort-scanner
        shell: bash
        if: contains(inputs.run, 'scanner')
        run: |
          echo -e "\e[1;33m Running ORT Scanner... "
          $ORT_CLI \
          --$ORT_LOG_LEVEL \
          $ORT_CLI_ARGS \
          scan \
          -i $ORT_RESULTS_CURRENT_PATH \
          -o $ORT_RESULTS_PATH \
          -f JSON \
          $ORT_CLI_SCAN_ARGS || ORT_CLI_SCAN_EXIT_CODE=$? \
          && export ORT_CLI_SCAN_EXIT_CODE="${ORT_CLI_SCAN_EXIT_CODE:-0}" \
          && printenv >> "$GITHUB_ENV"
          [[ -f $ORT_RESULTS_SCANNER_PATH ]] && \
            ln -frs $ORT_RESULTS_SCANNER_PATH $ORT_RESULTS_CURRENT_PATH || \
            echo -e "\e[1;31m File $ORT_RESULTS_SCANNER_PATH not found."
          [[ $ORT_CLI_SCAN_EXIT_CODE -ne 2 ]] && exit ${ORT_CLI_SCAN_EXIT_CODE} || exit 0
      - name: Run ORT Evaluator
        id: ort-evaluator
        shell: bash
        if: contains(inputs.run, 'evaluator')
        run: |
          echo -e "\e[1;33m Running ORT Evaluator... "
          echo -e "\e[1;33m ${ORT_CLI} ${ORT_LOG_LEVEL} ${ORT_CLI_ARGS} evaluate -i ${ORT_RESULTS_CURRENT_PATH} -o ${ORT_RESULTS_PATH} -f JSON ${ORT_CLI_EVALUATE_ARGS}"
          $ORT_CLI \
          --$ORT_LOG_LEVEL \
          $ORT_CLI_ARGS \
          evaluate \
          -i $ORT_RESULTS_CURRENT_PATH \
          -o $ORT_RESULTS_PATH \
          -f JSON \
          $ORT_CLI_EVALUATE_ARGS || ORT_CLI_EVALUATE_EXIT_CODE=$? \
          && export ORT_CLI_EVALUATE_EXIT_CODE="${ORT_CLI_EVALUATE_EXIT_CODE:-0}" \
          && printenv >> "$GITHUB_ENV"
          [[ -f $ORT_RESULTS_EVALUATOR_PATH ]] && \
            ln -frs $ORT_RESULTS_EVALUATOR_PATH $ORT_RESULTS_CURRENT_PATH || \
            echo -e "\e[1;31m File $ORT_RESULTS_EVALUATOR_PATH not found."
          [[ $ORT_CLI_EVALUATE_EXIT_CODE -ne 2 ]] && exit ${ORT_CLI_EVALUATE_EXIT_CODE} || exit 0
      - name: Run ORT Advisor
        id: ort-advisor
        shell: bash
        if: contains(inputs.run, 'advisor')
        env:
          ORT_ADVISORS: ${{ inputs.advisors }}
        run: |
          echo -e "\e[1;33m Running ORT Advisor... "
          $ORT_CLI \
          --$ORT_LOG_LEVEL \
          $ORT_CLI_ARGS \
          advise \
          -i $ORT_RESULTS_CURRENT_PATH \
          -o $ORT_RESULTS_PATH \
          -a $ORT_ADVISORS \
          -f JSON \
          $ORT_CLI_ADVISE_ARGS || ORT_CLI_ADVISE_EXIT_CODE=$? \
          && export ORT_CLI_ADVISE_EXIT_CODE="${ORT_CLI_ADVISE_EXIT_CODE:-0}" \
          && printenv >> "$GITHUB_ENV"
          [[ -f $ORT_RESULTS_ADVISOR_PATH ]] && \
            ln -frs $ORT_RESULTS_ADVISOR_PATH $ORT_RESULTS_CURRENT_PATH || \
            echo -e "\e[1;31m File $ORT_RESULTS_ADVISOR_PATH not found."
          [[ $ORT_CLI_ADVISE_EXIT_CODE -ne 2 ]] && exit ${ORT_CLI_ADVISE_EXIT_CODE} || exit 0
      - name: Run ORT Reporter
        id: ort-reporter
        shell: bash
        env:
          ORT_REPORT_FORMATS: ${{ inputs.report-formats }}
        if: contains(inputs.run, 'reporter')
        run: |
          echo -e "\e[1;33m Running ORT Reporter... "
          $ORT_CLI \
          --$ORT_LOG_LEVEL \
          $ORT_CLI_ARGS \
          report \
          -i $ORT_RESULTS_CURRENT_PATH \
          -o $ORT_RESULTS_PATH \
          -f $ORT_REPORT_FORMATS \
          -O PlainTextTemplate=template.path="${ORT_CONFIG_CI_RUN_TEMPLATE_PATH}" \
          -O SpdxDocument=document.name="${SW_NAME_SAFE}" \
          $ORT_CLI_REPORT_ARGS
      - name: Create Job Summary
        shell: bash
        run: |
          if [[ -f "$ORT_RESULTS_CI_RUN_SUMMARY" ]]; then
            echo -e "\e[1;33m Generating job summary..."
            echo $(<${ORT_RESULTS_CI_RUN_SUMMARY})
            echo "$(<${ORT_RESULTS_CI_RUN_SUMMARY})" >> $GITHUB_STEP_SUMMARY
            rm $ORT_RESULTS_CI_RUN_SUMMARY
          else
            echo -e "\e[1;31m Skipping job summary generation, file $ORT_RESULTS_CI_RUN_SUMMARY not found."
          fi
      - name: Remove current-result.yml file if present
        shell: bash
        run: |
          if [[ -f "$ORT_RESULTS_CURRENT_PATH" ]]; then
              rm -f $ORT_RESULTS_CURRENT_PATH
          fi
      - name: Upload ORT results
        uses: actions/upload-artifact@v3
        if: contains(inputs.run, 'upload-results')
        with:
          name: ${{ env.ORT_RESULTS_ARTIFACT_NAME }}
          path: ${{ env.ORT_RESULTS_PATH }}
          if-no-files-found: warn
      - name: Upload ORT advisor-result.json
        uses: actions/upload-artifact@v3
        if: contains(inputs.run, 'upload-advisor-result')
        with:
          name: "${{ env.ORT_RESULTS_ARTIFACT_NAME }}-advisor-result.json.zip"
          path: ${{ env.ORT_RESULTS_ADVISOR_PATH }}
          if-no-files-found: warn
      - name: Upload ORT evaluation-result.json
        uses: actions/upload-artifact@v3
        if: contains(inputs.run, 'upload-evaluation-result')
        with:
          name: "${{ env.ORT_RESULTS_ARTIFACT_NAME }}-evaluation-result.json.zip"
          path: ${{ env.ORT_RESULTS_EVALUATE_PATH }}
          if-no-files-found: warn
      - name: Upload ORT scan-result.json
        uses: actions/upload-artifact@v3
        if: contains(inputs.run, 'upload-scan-result')
        with:
          name: "${{ env.ORT_RESULTS_ARTIFACT_NAME }}-scan-result.json.zip"
          path: ${{ env.ORT_RESULTS_SCANNER_PATH }}
          if-no-files-found: warn
      - name: Conditionally fail action if returned violations from Evaluator exceeds severity threshold
        if: contains(inputs.fail-on, 'violations') && contains(env.ORT_CLI_EVALUATE_EXIT_CODE, 2)
        shell: bash
        run: |
          echo -e "\e[1;31m Failing action as Evaluator exceeded severity threshold... "
          exit 2
      - name: Conditionally fail action if returned issues from Advisor exceeds severity threshold
        if: contains(inputs.fail-on, 'issues') && contains(env.ORT_CLI_ADVISE_EXIT_CODE, 2)
        shell: bash
        run: |
          echo -e "\e[1;31m Failing action as Advisor exceeded severity threshold... "
          exit 2
